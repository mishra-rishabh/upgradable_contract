/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface SquareInterface extends utils.Interface {
  functions: {
    "retrieveArea()": FunctionFragment;
    "retrievePerimeter()": FunctionFragment;
    "storeSide(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "retrieveArea",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retrievePerimeter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "storeSide",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "retrieveArea",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrievePerimeter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "storeSide", data: BytesLike): Result;

  events: {
    "ValueChanged(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ValueChanged"): EventFragment;
}

export type ValueChangedEvent = TypedEvent<[BigNumber], { value: BigNumber }>;

export type ValueChangedEventFilter = TypedEventFilter<ValueChangedEvent>;

export interface Square extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SquareInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    retrieveArea(overrides?: CallOverrides): Promise<[BigNumber]>;

    retrievePerimeter(overrides?: CallOverrides): Promise<[BigNumber]>;

    storeSide(
      side: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  retrieveArea(overrides?: CallOverrides): Promise<BigNumber>;

  retrievePerimeter(overrides?: CallOverrides): Promise<BigNumber>;

  storeSide(
    side: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    retrieveArea(overrides?: CallOverrides): Promise<BigNumber>;

    retrievePerimeter(overrides?: CallOverrides): Promise<BigNumber>;

    storeSide(side: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "ValueChanged(uint256)"(value?: null): ValueChangedEventFilter;
    ValueChanged(value?: null): ValueChangedEventFilter;
  };

  estimateGas: {
    retrieveArea(overrides?: CallOverrides): Promise<BigNumber>;

    retrievePerimeter(overrides?: CallOverrides): Promise<BigNumber>;

    storeSide(
      side: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    retrieveArea(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    retrievePerimeter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    storeSide(
      side: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
